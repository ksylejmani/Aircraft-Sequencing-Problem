// Generated by CoffeeScript 1.7.1
define(['jquery', 'external/react', 'modules/core/i18n', 'modules/clean/activity/activity_user', 'modules/clean/keycode', 'modules/clean/storage', 'modules/clean/react/activity/comment_input', 'modules/core/browser'], function($j, React, _arg, ActivityUser, KeyCode, _arg1, CommentInputClass, Browser) {
  var AnnotationBubble, CommentInput, LocalStorage, cx, d, _;
  _ = _arg._;
  LocalStorage = _arg1.LocalStorage;
  d = React.DOM;
  cx = React.addons.classSet;
  CommentInput = React.createFactory(CommentInputClass);
  return AnnotationBubble = React.createClass({
    displayName: "AnnotationBubble",
    propTypes: {
      user: React.PropTypes.object,
      activity: React.PropTypes.object,
      contextActivityStore: React.PropTypes.object,
      x: React.PropTypes.number,
      y: React.PropTypes.number,
      showBubble: React.PropTypes.bool,
      in_blank_state: React.PropTypes.bool,
      onAddComment: React.PropTypes.func,
      annotation: React.PropTypes.object,
      position: React.PropTypes.string
    },
    getInitialState: function() {
      this.tempEnteredText = "";
      return {};
    },
    getDefaultProps: function() {
      return {
        position: "top"
      };
    },
    componentDidMount: function() {
      return {};
    },
    componentWillUpdate: function(nextProps, nextState) {
      var _ref;
      if (this.props.showBubble === true && nextProps.showBubble === false && this._getRawCommentInput().length > 0 && this._getRawCommentInput() !== ((_ref = this.refs.commentInput) != null ? _ref.getPlaceholderText() : void 0)) {
        return this.tempEnteredText = this._getRawCommentInput();
      }
    },
    componentDidUpdate: function(prevProps, prevState) {
      if (prevProps.showBubble === false && this.props.showBubble === true) {
        if (Browser.mozilla != null) {
          document.activeElement.blur();
        }
        this._focusOnCommentInput();
        if (Browser.mozilla != null) {
          return this.refs.commentInput.setCursorToEndOfInput();
        }
      }
    },
    onInputFocus: function(event) {
      return {};
    },
    onInputBlur: function(event) {
      return {};
    },
    onAddComment: function(text) {
      var _base;
      if (typeof (_base = this.props).onAddComment === "function") {
        _base.onAddComment(text, this.props.annotation);
      }
      return this.tempEnteredText = "";
    },
    _focusOnCommentInput: function() {
      var _ref;
      return (_ref = this.refs.commentInput) != null ? _ref.focusInput() : void 0;
    },
    _getRawCommentInput: function() {
      var _ref;
      return (_ref = this.refs.commentInput) != null ? _ref.getRawCommentInput() : void 0;
    },
    _renderCommentBox: function() {
      return d.div({
        className: "annotation-bubble__field"
      }, CommentInput({
        ref: "commentInput",
        activity: this.props.activity,
        user: this.props.user,
        initialText: this.tempEnteredText,
        inBlankState: false,
        enableNotifyText: false,
        enableNoNotifyHint: false,
        commentMetadataAllowed: true,
        popupsShouldDropdown: false,
        shouldAlwaysInEditMode: true,
        commentCallback: this.onAddComment,
        onFocus: this.onInputFocus,
        onBlur: this.onInputBlur
      }));
    },
    render: function() {
      var bubbleUI, classes;
      classes = {
        "fade-in": this.props.showBubble,
        "fade-out": !this.props.showBubble,
        "annotation-bubble-container": true
      };
      bubbleUI = [];
      if (this.props.showBubble) {
        bubbleUI = [
          d.div({
            className: "annotation-bubble bubble-dropdown " + this.props.position,
            style: {
              left: this.props.x || 0,
              top: this.props.y || 0
            }
          }, this._renderCommentBox(), d.div({
            className: "bubble-arrow-border"
          }), d.div({
            className: "bubble-arrow"
          }))
        ];
      }
      return d.div({
        className: cx(classes)
      }, this.props.showBubble ? bubbleUI : void 0);
    }
  });
});

//# sourceMappingURL=annotation_bubble.map
