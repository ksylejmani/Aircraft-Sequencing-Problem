// Generated by CoffeeScript 1.7.1
define(['external/react', 'external/underscore', 'modules/clean/datetime', 'modules/clean/annotations/annotation'], function(React, $u, DateTime, _arg) {
  var Annotation, AnnotationButton, AnnotationSubtypes, AnnotationTypes, MAX_PDF_HEIGHT, MAX_PDF_WIDTH, PDF_HIGHLIGHT_THUMBNAIL_PAGE_HEIGHT, PDF_HIGHLIGHT_THUMBNAIL_PAGE_WIDTH, PDF_MARKER_THUMBNAIL_PAGE_HEIGHT, PDF_MARKER_THUMBNAIL_PAGE_WIDTH, PDF_REGION_THUMBNAIL_PAGE_HEIGHT, PDF_REGION_THUMBNAIL_PAGE_WIDTH, PDF_THUMBNAIL_MARKER_SIZE, PDF_THUMBNAIL_PAGE_HEIGHT, PDF_THUMBNAIL_PAGE_WIDTH, d;
  Annotation = _arg.Annotation, AnnotationTypes = _arg.AnnotationTypes, AnnotationSubtypes = _arg.AnnotationSubtypes;
  d = React.DOM;
  MAX_PDF_WIDTH = 610;
  MAX_PDF_HEIGHT = 790;
  PDF_THUMBNAIL_MARKER_SIZE = 6;
  PDF_THUMBNAIL_PAGE_WIDTH = 20;
  PDF_THUMBNAIL_PAGE_HEIGHT = 28;
  PDF_MARKER_THUMBNAIL_PAGE_WIDTH = 14;
  PDF_MARKER_THUMBNAIL_PAGE_HEIGHT = 22;
  PDF_HIGHLIGHT_THUMBNAIL_PAGE_WIDTH = 20;
  PDF_HIGHLIGHT_THUMBNAIL_PAGE_HEIGHT = 25;
  PDF_REGION_THUMBNAIL_PAGE_WIDTH = 20;
  PDF_REGION_THUMBNAIL_PAGE_HEIGHT = 28;
  AnnotationButton = React.createClass({
    displayName: "AnnotationBubble",
    propTypes: {
      annotation: React.PropTypes.object,
      revision: React.PropTypes.object,
      isOldRevision: React.PropTypes.bool,
      onAnnotationButtonMouseUp: React.PropTypes.func
    },
    getDefaultProps: function() {
      return {};
    },
    getInitialState: function() {
      return {};
    },
    _getAnnotationThumbnail: function() {
      var annotation, highlight, markerLeft, markerTop, maxX, maxY, minX, minY, pdfPage, region, thumbnailUI, xCoordinates, yCoordinates, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      annotation = this.props.annotation;
      switch (annotation.type) {
        case AnnotationTypes.MARKER:
          markerLeft = this._calculateThumbnailUIWidth((_ref = annotation.getFirstPdfCoordinates()) != null ? _ref.x : void 0);
          markerTop = this._calculateThumbnailUIHeight((_ref1 = annotation.getFirstPdfCoordinates()) != null ? _ref1.y : void 0);
          return d.div({
            className: "annotation-thumbnail-page__marker",
            style: {
              left: markerLeft + (PDF_THUMBNAIL_MARKER_SIZE / 2),
              top: markerTop + (PDF_THUMBNAIL_MARKER_SIZE / 2)
            }
          });
        case AnnotationTypes.HIGHLIGHT:
          thumbnailUI = [];
          pdfPage = annotation.getFirstPdfPage();
          _ref2 = annotation.pdf_coordinates;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            highlight = _ref2[_i];
            if (highlight.page === pdfPage) {
              thumbnailUI.push(d.div({
                className: "annotation-thumbnail-page__highlight",
                style: {
                  left: this._calculateThumbnailUIWidth(highlight.coordinates[0].x),
                  top: this._calculateThumbnailUIHeight(highlight.coordinates[0].y),
                  width: this._calculateThumbnailUIWidth(highlight.coordinates[1].x - highlight.coordinates[0].x)
                }
              }));
            }
          }
          return thumbnailUI;
        case AnnotationTypes.REGION:
          thumbnailUI = [];
          pdfPage = annotation.getFirstPdfPage();
          _ref3 = annotation.pdf_coordinates;
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            region = _ref3[_j];
            if (region.page === pdfPage) {
              xCoordinates = $u.pluck(region.coordinates, 'x');
              yCoordinates = $u.pluck(region.coordinates, 'y');
              minX = $u.min(xCoordinates);
              maxX = $u.max(xCoordinates);
              minY = $u.min(yCoordinates);
              maxY = $u.max(yCoordinates);
              thumbnailUI.push(d.div({
                className: "annotation-thumbnail-page__region",
                style: {
                  left: this._calculateThumbnailUIWidth(minX),
                  top: this._calculateThumbnailUIHeight(maxY),
                  width: this._calculateThumbnailUIWidth(maxX - minX),
                  height: Math.abs(this._calculateThumbnailUIHeight(maxY) - this._calculateThumbnailUIHeight(minY))
                }
              }));
            }
          }
          return thumbnailUI;
      }
    },
    _calculateThumbnailUIWidth: function(distance) {
      var THUMBNAIL_WIDTH, annotation;
      annotation = this.props.annotation;
      switch (annotation.type) {
        case AnnotationTypes.MARKER:
          THUMBNAIL_WIDTH = PDF_MARKER_THUMBNAIL_PAGE_WIDTH;
          break;
        case AnnotationTypes.HIGHLIGHT:
          THUMBNAIL_WIDTH = PDF_HIGHLIGHT_THUMBNAIL_PAGE_WIDTH;
          break;
        case AnnotationTypes.REGION:
          THUMBNAIL_WIDTH = PDF_REGION_THUMBNAIL_PAGE_WIDTH;
      }
      return distance / MAX_PDF_WIDTH * THUMBNAIL_WIDTH;
    },
    _calculateThumbnailUIHeight: function(distance) {
      var THUMBNAIL_HEIGHT, annotation;
      annotation = this.props.annotation;
      switch (annotation.type) {
        case AnnotationTypes.MARKER:
          THUMBNAIL_HEIGHT = PDF_MARKER_THUMBNAIL_PAGE_HEIGHT;
          break;
        case AnnotationTypes.HIGHLIGHT:
          THUMBNAIL_HEIGHT = PDF_HIGHLIGHT_THUMBNAIL_PAGE_HEIGHT;
          break;
        case AnnotationTypes.REGION:
          THUMBNAIL_HEIGHT = PDF_REGION_THUMBNAIL_PAGE_HEIGHT;
      }
      return (MAX_PDF_HEIGHT - distance) / MAX_PDF_HEIGHT * THUMBNAIL_HEIGHT;
    },
    _getAnnotationText: function() {
      var ANNOTATION_LENGTH_CUTOFF, text;
      ANNOTATION_LENGTH_CUTOFF = 120;
      text = this.props.annotation.text_highlight.text;
      if (text.length > ANNOTATION_LENGTH_CUTOFF) {
        text = text.substring(0, ANNOTATION_LENGTH_CUTOFF - 3) + "...";
      }
      return "\"" + text + "\"";
    },
    render: function() {
      var annotation, isOldRevision, revision;
      annotation = this.props.annotation;
      revision = this.props.revision;
      isOldRevision = this.props.isOldRevision;
      return d.a({
        className: "comment-annotation-button",
        onMouseUp: this.props.onAnnotationButtonMouseUp
      }, d.div({
        className: "annotation-page-label"
      }, annotation.pdf_coordinates != null ? d.div({
        className: "annotation-thumbnail-page"
      }, this._getAnnotationThumbnail()) : void 0, d.div({
        className: "annotation-thumbnail-label"
      }, d.div({
        className: "annotation-thumbnail-label__page"
      }, "Page " + (annotation.getFirstPdfPage())), d.div({
        className: "annotation-thumbnail-label__info"
      }, (revision.when != null) && !isNaN(new Date(revision.when != null)) && isOldRevision ? "on revision updated " + (DateTime.ago(new Date(revision.when * 1000))) : "on latest revision"))), annotation.type === AnnotationTypes.HIGHLIGHT ? d.div({
        className: "annotation-thumbnail-text"
      }, this._getAnnotationText()) : void 0);
    }
  });
  return AnnotationButton;
});

//# sourceMappingURL=annotation_button.map
