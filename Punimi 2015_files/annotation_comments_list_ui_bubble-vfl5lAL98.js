// Generated by CoffeeScript 1.7.1
define(['external/react', 'modules/core/i18n', 'modules/clean/activity/activity_user', 'modules/clean/activity/file_viewer_state', 'modules/clean/datetime', 'modules/clean/keycode', 'modules/clean/storage', 'modules/clean/react/activity/comment_activity_ui'], function(React, _arg, ActivityUser, FileViewerState, DateTime, KeyCode, _arg1, CommentActivityUIClass) {
  var AnnotationCommentsListUIBubble, CommentActivityUI, LocalStorage, cx, d, _;
  _ = _arg._;
  LocalStorage = _arg1.LocalStorage;
  d = React.DOM;
  cx = React.addons.classSet;
  CommentActivityUI = React.createFactory(CommentActivityUIClass);
  return AnnotationCommentsListUIBubble = React.createClass({
    displayName: "AnnotationCommentsListUIBubble",
    propTypes: {
      user: React.PropTypes.object,
      activity: React.PropTypes.object,
      contextActivityStore: React.PropTypes.object,
      fileViewerState: React.PropTypes.object,
      x: React.PropTypes.number,
      y: React.PropTypes.number,
      showBubble: React.PropTypes.bool,
      annotation: React.PropTypes.object,
      commentActivity: React.PropTypes.object,
      onDeleteComment: React.PropTypes.func,
      onLikeComment: React.PropTypes.func,
      onMouseLeave: React.PropTypes.func,
      onMouseOver: React.PropTypes.func,
      onUpdateResolve: React.PropTypes.func,
      position: React.PropTypes.string
    },
    getInitialState: function() {
      var button_disabled, initial_text, show_post_button;
      button_disabled = true;
      show_post_button = false;
      initial_text = "";
      return {
        button_disabled: button_disabled,
        show_post_button: show_post_button,
        initial_text: initial_text
      };
    },
    onMouseOver: function(event) {
      var _base;
      return typeof (_base = this.props).onMouseOver === "function" ? _base.onMouseOver(this.props.annotation) : void 0;
    },
    onMouseLeave: function(event) {
      var _base;
      return typeof (_base = this.props).onMouseLeave === "function" ? _base.onMouseLeave(this.props.annotation) : void 0;
    },
    onUpdateResolve: function(commentActivity, resolved) {
      var _base;
      return typeof (_base = this.props).onUpdateResolve === "function" ? _base.onUpdateResolve(commentActivity, resolved) : void 0;
    },
    onDeleteComment: function(commentActivity) {
      var _base;
      return typeof (_base = this.props).onDeleteComment === "function" ? _base.onDeleteComment(commentActivity) : void 0;
    },
    onLikeComment: function(commentActivity) {
      var _base;
      return typeof (_base = this.props).onLikeComment === "function" ? _base.onLikeComment(commentActivity) : void 0;
    },
    _getRevisionDateTime: function() {
      var revision;
      revision = this._getRevision();
      if ((revision.when != null) && !isNaN(new Date(revision.when != null))) {
        return "" + (DateTime.ago(new Date(revision.when * 1000)));
      }
    },
    _getRevision: function() {
      return this.props.commentActivity.comment.comment_metadata.revision;
    },
    _isOnOldRevision: function() {
      return !this.props.fileViewerState.isCurrentlyAtRevision(this._getRevision());
    },
    _renderCommentsListUI: function() {
      return d.div({
        className: "annotation-bubble__field",
        onMouseOver: this.onMouseOver,
        onMouseLeave: this.onMouseLeave
      }, this._isOnOldRevision() ? d.div({
        className: "annotation-bubble__field__old-revision"
      }, "On revision updated " + (this._getRevisionDateTime())) : void 0, d.div({
        className: "comments-holder"
      }, d.div({
        className: "comment-list"
      }, CommentActivityUI({
        key: this.props.commentActivity.activity_key,
        comment_activity: this.props.commentActivity,
        context_activity_store: this.props.contextActivityStore,
        user: this.props.user,
        fileViewerState: this.props.fileViewerState,
        onLikeComment: this.onLikeComment,
        delete_comment: this.onDeleteComment,
        update_resolved: this.onUpdateResolve
      }))));
    },
    render: function() {
      var bubbleUI, classes;
      classes = {
        "fade-in": this.props.showBubble,
        "fade-out": !this.props.showBubble,
        "annotation-bubble-container": true
      };
      bubbleUI = [];
      if (this.props.showBubble) {
        bubbleUI = [
          d.div({
            className: "annotation-bubble bubble-dropdown " + this.props.position,
            style: {
              left: this.props.x || 0,
              top: this.props.y || 0
            }
          }, this._renderCommentsListUI(), d.div({
            className: "bubble-arrow-border"
          }), d.div({
            className: "bubble-arrow"
          }))
        ];
      }
      return d.div({
        className: cx(classes)
      }, this.props.showBubble ? bubbleUI : void 0);
    }
  });
});

//# sourceMappingURL=annotation_comments_list_ui_bubble.map
