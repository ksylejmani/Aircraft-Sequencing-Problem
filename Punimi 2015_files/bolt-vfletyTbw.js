// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['jquery', 'external/underscore', 'modules/clean/base64', 'modules/core/exception', 'modules/core/uri'], function($j, $u, base64, JSException, URI) {
  var BACKOFF_BASE_MS, BACKOFF_CAP_MS, BoltClient, ChannelId, SignedChannelState;
  BACKOFF_BASE_MS = 1000;
  BACKOFF_CAP_MS = 300000;
  ChannelId = (function() {
    function ChannelId(app_id, unique_id) {
      this.app_id = app_id;
      this.unique_id = unique_id;
    }

    return ChannelId;

  })();
  SignedChannelState = (function() {
    function SignedChannelState(app_id, unique_id, revision, token) {
      this.app_id = app_id;
      this.unique_id = unique_id;
      this.revision = revision;
      this.token = token;
    }

    return SignedChannelState;

  })();
  BoltClient = (function() {
    BoltClient.prototype._encode_channel_state = function(signed_channel_state) {
      return {
        'channel_id': {
          'app_id': base64.encode(signed_channel_state.app_id),
          'unique_id': base64.encode(signed_channel_state.unique_id)
        },
        'revision': signed_channel_state.revision,
        'token': signed_channel_state.token
      };
    };

    BoltClient.prototype._decode_channel_state = function(signed_channel_state) {
      return new SignedChannelState(base64.decode(signed_channel_state.channel_id.app_id), base64.decode(signed_channel_state.channel_id.unique_id), signed_channel_state.revision, signed_channel_state.token);
    };

    BoltClient.prototype._decode_channel_id = function(channel_id) {
      return new ChannelId(base64.decode(channel_id.app_id), base64.decode(channel_id.unique_id));
    };

    BoltClient.prototype._compare_revisions = function(rev1, rev2) {
      var padded_length, padded_rev1, padded_rev2;
      padded_length = Math.max(rev1.length, rev2.length);
      padded_rev1 = Array(padded_length - rev1.length + 1).join('0') + rev1;
      padded_rev2 = Array(padded_length - rev2.length + 1).join('0') + rev2;
      if (padded_rev1 < padded_rev2) {
        return -1;
      } else if (padded_rev1 > padded_rev2) {
        return 1;
      } else {
        return 0;
      }
    };

    function BoltClient(signed_channel_states, _update_callback, _refresh_callback) {
      this._update_callback = _update_callback;
      this._refresh_callback = _refresh_callback;
      this._handle_poll_error = __bind(this._handle_poll_error, this);
      this._handle_poll_success = __bind(this._handle_poll_success, this);
      this._long_poll = __bind(this._long_poll, this);
      this._signed_channel_states = [];
      this._started = false;
      this._backoff_window = BACKOFF_BASE_MS;
      this.update_states(signed_channel_states);
    }

    BoltClient.prototype.update_states = function(signed_channel_states) {
      var matched_state, newstate, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = signed_channel_states.length; _i < _len; _i++) {
        newstate = signed_channel_states[_i];
        newstate = this._encode_channel_state(newstate);
        matched_state = $u.find(this._signed_channel_states, function(cs) {
          return $u.isEqual(newstate.channel_id, cs.channel_id);
        });
        if (matched_state == null) {
          _results.push(this._signed_channel_states.push(newstate));
        } else if (this._compare_revisions(newstate.revision, matched_state.revision) > 0) {
          matched_state.revision = newstate.revision;
          _results.push(matched_state.token = newstate.token);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BoltClient.prototype.start = function() {
      if (!!this._started) {
        return;
      }
      this._started = true;
      return this._long_poll();
    };

    BoltClient.prototype.unsubscribe = function() {
      this._started = false;
      if (this._long_poll_xhr != null) {
        return this._long_poll_xhr.abort();
      }
    };

    BoltClient.prototype._long_poll = function() {
      return this._long_poll_xhr = $j.ajax({
        url: '/notify/subscribe',
        type: 'POST',
        noDropboxDefaults: true,
        data: JSON.stringify({
          'channel_states': this._signed_channel_states
        }),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        timeout: 120000,
        success: this._handle_poll_success,
        error: this._handle_poll_error
      });
    };

    BoltClient.prototype._handle_poll_success = function(data) {
      var assert_msg, channel_id, matched_state, newstate, state, updated_channel_states, _i, _len, _ref, _ref1, _ref2;
      this._long_poll_xhr = null;
      if (!this._started) {
        return;
      }
      if (((_ref = data.channel_states) != null ? _ref.length : void 0) > 0) {
        updated_channel_states = [];
        _ref1 = data.channel_states;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          newstate = _ref1[_i];
          matched_state = $u.find(this._signed_channel_states, function(cs) {
            return $u.isEqual(newstate.channel_id, cs.channel_id);
          });
          if (matched_state == null) {
            assert_msg = "Bolt returned unknown channel id " + newstate.channel_id;
            JSException.assert(false, assert_msg, null, null, false);
          } else if (this._compare_revisions(newstate.revision, matched_state.revision) > 0) {
            matched_state.revision = newstate.revision;
            matched_state.token = newstate.token;
            updated_channel_states.push(newstate);
          }
        }
        if (updated_channel_states.length > 0) {
          $u.defer(this._update_callback, (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = updated_channel_states.length; _j < _len1; _j++) {
              state = updated_channel_states[_j];
              _results.push(this._decode_channel_state(state));
            }
            return _results;
          }).call(this));
        }
      }
      if (((_ref2 = data.invalid_channels) != null ? _ref2.length : void 0) > 0) {
        $u.defer(this._refresh_callback, (function() {
          var _j, _len1, _ref3, _results;
          _ref3 = data.invalid_channels;
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            channel_id = _ref3[_j];
            _results.push(this._decode_channel_id(channel_id));
          }
          return _results;
        }).call(this));
        return;
      }
      this._backoff_window = BACKOFF_BASE_MS;
      return $u.defer(this._long_poll);
    };

    BoltClient.prototype._handle_poll_error = function(xhr, reason) {
      var backoff_duration;
      this._long_poll_xhr = null;
      if (!this._started) {
        return;
      }
      backoff_duration = Math.random() * this._backoff_window;
      this._backoff_window = Math.min(2 * this._backoff_window, BACKOFF_CAP_MS);
      return window.setTimeout(this._long_poll, backoff_duration);
    };

    return BoltClient;

  })();
  return {
    BoltClient: BoltClient,
    ChannelId: ChannelId,
    SignedChannelState: SignedChannelState
  };
});

//# sourceMappingURL=bolt.map
