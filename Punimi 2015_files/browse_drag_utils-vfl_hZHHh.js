// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['jquery'], function($j) {
  var BrowseDragUtils;
  return BrowseDragUtils = {
    _dragEnabledChecks: [],
    getDraggedLink: function(dataTransfer) {
      var browseFileDragged, error, externalFileDragged, mozUrl, mozUrlLines, uri;
      if (dataTransfer == null) {
        return null;
      }
      externalFileDragged = __indexOf.call(dataTransfer.types, 'Files') >= 0;
      browseFileDragged = (__indexOf.call(dataTransfer.types, 'text/html') >= 0 && $j(dataTransfer.getData('text/html')).attr("draggable")) || (__indexOf.call(dataTransfer.types, 'text/uri-list') >= 0 && dataTransfer.getData('text/uri-list') === 'about:blank') || (__indexOf.call(dataTransfer.types, 'Url') >= 0 && dataTransfer.getData('Url') === 'about:blank');
      if (externalFileDragged || browseFileDragged) {
        return null;
      }
      uri = null;
      try {
        mozUrl = dataTransfer.getData('text/x-moz-url');
      } catch (_error) {
        error = _error;
      }
      if (mozUrl != null) {
        mozUrlLines = mozUrl.split('\n');
        if (mozUrlLines.length >= 1) {
          uri = mozUrlLines[0];
        }
      }
      if (!uri) {
        try {
          uri = dataTransfer.getData('text/uri-list');
        } catch (_error) {
          error = _error;
        }
      }
      if (!uri) {
        try {
          uri = dataTransfer.getData('Url');
        } catch (_error) {}
      }
      if (!uri) {
        uri = null;
      }
      return uri;
    },
    buildUrlLinkfileContents: function(url) {
      return "[InternetShortcut]\r\nURL=" + url + "\r\n";
    },
    isFileDragEnabled: function() {
      var dragEnabledCheck, _i, _len, _ref;
      _ref = this._dragEnabledChecks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dragEnabledCheck = _ref[_i];
        if (!dragEnabledCheck()) {
          return false;
        }
      }
      return true;
    },
    addFileDragEnabledCheck: function(dragEnabledCheck) {
      return this._dragEnabledChecks.push(dragEnabledCheck);
    },
    removeFileDragEnabledCheck: function(dragEnabledCheck) {
      var checkIndex;
      checkIndex = this._dragEnabledChecks.indexOf(dragEnabledCheck);
      if (checkIndex >= 0) {
        return this._dragEnabledChecks.splice(checkIndex, 1);
      }
    },
    removeAllFileDragEnabledChecks: function() {
      return this._dragEnabledChecks = [];
    }
  };
});

//# sourceMappingURL=browse_drag_utils.map
