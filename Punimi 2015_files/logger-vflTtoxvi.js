// Generated by CoffeeScript 1.7.1
define(['modules/clean/ajax'], function(ajax) {
  var GrowthExperimentsLogger;
  GrowthExperimentsLogger = (function() {
    var breakpoint_times, breakpoints;

    function GrowthExperimentsLogger() {}

    GrowthExperimentsLogger.start_times = {};

    GrowthExperimentsLogger.DEFAULT_TIMER_NAME = "view_time";

    GrowthExperimentsLogger.get_timer_name = function(log_time) {
      if ((log_time == null) || typeof log_time === 'boolean') {
        return GrowthExperimentsLogger.DEFAULT_TIMER_NAME;
      } else {
        return log_time;
      }
    };

    GrowthExperimentsLogger.set_start_time = function(log_time) {
      var timer_name;
      timer_name = GrowthExperimentsLogger.get_timer_name(log_time);
      return GrowthExperimentsLogger.start_times[timer_name] = Date.now();
    };

    GrowthExperimentsLogger.do_log_view_time = function(extra, log_time) {
      var timer_name;
      timer_name = GrowthExperimentsLogger.get_timer_name(log_time);
      return extra[timer_name] = Math.round((Date.now() - GrowthExperimentsLogger.start_times[timer_name]) / 1000);
    };

    breakpoints = {};

    breakpoint_times = [5, 15, 60, 120, 300];

    GrowthExperimentsLogger.start_counter = function(counter_name, log_callback) {
      var time, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = breakpoint_times.length; _i < _len; _i++) {
        time = breakpoint_times[_i];
        _results.push((function(time) {
          return breakpoints[counter_name + time] = setTimeout(function() {
            return log_callback(counter_name, {
              time_since_first_view: time
            });
          }, time * 1000);
        })(time));
      }
      return _results;
    };

    GrowthExperimentsLogger.stop_counter = function(counter_name) {
      var time, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = breakpoint_times.length; _i < _len; _i++) {
        time = breakpoint_times[_i];
        _results.push(clearTimeout(breakpoints[counter_name + time]));
      }
      return _results;
    };

    GrowthExperimentsLogger.log = function(series, evt, extra, log_time) {
      if (log_time == null) {
        log_time = false;
      }
      extra = extra || {};
      switch (series) {
        case 'onboarding':
          if (log_time) {
            GrowthExperimentsLogger.do_log_view_time(extra, log_time);
          }
          return ajax.WebRequest({
            url: "/growth_onboarding_log",
            data: {
              evt: evt,
              extra: JSON.stringify(extra)
            }
          });
        case 'sharing':
          GrowthExperimentsLogger.do_log_view_time(extra);
          return ajax.WebRequest({
            url: "/growth_sharing_log",
            data: {
              evt: evt,
              extra: JSON.stringify(extra)
            }
          });
        default:
          throw new Error("Invalid series name");
      }
    };

    return GrowthExperimentsLogger;

  })();
  return GrowthExperimentsLogger;
});

//# sourceMappingURL=logger.map
